// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Server.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Server.Models
{
    public partial class VNVCTestContext
    {
        private IVNVCTestContextProcedures _procedures;

        public virtual IVNVCTestContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new VNVCTestContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IVNVCTestContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SP_GetDanhSachDatSoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GetDateResult>().HasNoKey().ToView(null);
        }
    }

    public partial class VNVCTestContextProcedures : IVNVCTestContextProcedures
    {
        private readonly VNVCTestContext _context;

        public VNVCTestContextProcedures(VNVCTestContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SP_GetDanhSachDatSoResult>> SP_GetDanhSachDatSoAsync(int? IDNguoiChoi, DateTime? NgayDat, int? GioDat, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDNguoiChoi",
                    Value = IDNguoiChoi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NgayDat",
                    Value = NgayDat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "GioDat",
                    Value = GioDat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetDanhSachDatSoResult>("EXEC @returnValue = [dbo].[SP_GetDanhSachDatSo] @IDNguoiChoi, @NgayDat, @GioDat", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GetDateResult>> SP_GetDateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GetDateResult>("EXEC @returnValue = [dbo].[SP_GetDate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
